import { EntityId } from "@reduxjs/toolkit";
export declare const ordersSelectors: import("@reduxjs/toolkit").EntitySelectors<import("../../index.ts").IOrder, import("@reduxjs/toolkit/query").RootState<{
    getOrders: import("@reduxjs/toolkit/query").QueryDefinition<void, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, import("@reduxjs/toolkit").EntityState<import("../../index.ts").IOrder, EntityId>, "api">;
    getOrder: import("@reduxjs/toolkit/query").QueryDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, import("@reduxjs/toolkit").EntityState<import("../../index.ts").IOrder, EntityId>, "api">;
    createOrder: import("@reduxjs/toolkit/query").MutationDefinition<import("../../index.ts").IOrder, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, {
        success: boolean;
    }, "api">;
    updateOrderStatus: import("@reduxjs/toolkit/query").MutationDefinition<import("./endpoints.ts").IUpdateOrderRequestPayload, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
    cancelOrder: import("@reduxjs/toolkit/query").MutationDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
    confirmOrder: import("@reduxjs/toolkit/query").MutationDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
}, import("../../enums/tags.ts").ApiTags, "api">, EntityId>;
export declare const orderByIdSelectors: import("@reduxjs/toolkit").EntitySelectors<import("../../index.ts").IOrder, import("@reduxjs/toolkit/query").RootState<{
    getOrders: import("@reduxjs/toolkit/query").QueryDefinition<void, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, import("@reduxjs/toolkit").EntityState<import("../../index.ts").IOrder, EntityId>, "api">;
    getOrder: import("@reduxjs/toolkit/query").QueryDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, import("@reduxjs/toolkit").EntityState<import("../../index.ts").IOrder, EntityId>, "api">;
    createOrder: import("@reduxjs/toolkit/query").MutationDefinition<import("../../index.ts").IOrder, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, {
        success: boolean;
    }, "api">;
    updateOrderStatus: import("@reduxjs/toolkit/query").MutationDefinition<import("./endpoints.ts").IUpdateOrderRequestPayload, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
    cancelOrder: import("@reduxjs/toolkit/query").MutationDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
    confirmOrder: import("@reduxjs/toolkit/query").MutationDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
}, import("../../enums/tags.ts").ApiTags, "api">, EntityId>;
export declare const orderByIdSelectorsFactory: (id: EntityId) => import("@reduxjs/toolkit").EntitySelectors<import("../../index.ts").IOrder, import("@reduxjs/toolkit/query").RootState<{
    getOrders: import("@reduxjs/toolkit/query").QueryDefinition<void, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, import("@reduxjs/toolkit").EntityState<import("../../index.ts").IOrder, EntityId>, "api">;
    getOrder: import("@reduxjs/toolkit/query").QueryDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, import("@reduxjs/toolkit").EntityState<import("../../index.ts").IOrder, EntityId>, "api">;
    createOrder: import("@reduxjs/toolkit/query").MutationDefinition<import("../../index.ts").IOrder, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, {
        success: boolean;
    }, "api">;
    updateOrderStatus: import("@reduxjs/toolkit/query").MutationDefinition<import("./endpoints.ts").IUpdateOrderRequestPayload, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
    cancelOrder: import("@reduxjs/toolkit/query").MutationDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
    confirmOrder: import("@reduxjs/toolkit/query").MutationDefinition<EntityId, import("@reduxjs/toolkit/query").BaseQueryFn<string | import("@reduxjs/toolkit/query").FetchArgs, unknown, import("@reduxjs/toolkit/query").FetchBaseQueryError>, import("../../enums/tags.ts").ApiTags, void, "api">;
}, import("../../enums/tags.ts").ApiTags, "api">, EntityId>;
